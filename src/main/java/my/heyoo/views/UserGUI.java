/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package my.heyoo.views;

import static java.awt.event.KeyEvent.VK_ENTER;
import java.util.Observable;
import java.util.Observer;
import my.heyoo.ConfigFile;
import my.heyoo.controllers.ConnectionController;
import my.heyoo.messages.Message;
import my.heyoo.messages.TextMessage;

/**
 *
 * @author AdministratorJa
 */
public class UserGUI extends javax.swing.JFrame implements Observer{
    
    public UserGUI() {
        initComponents();
        this.activityView = new ActivityView(OtherUserActivityLabel);
        config = ConfigFile.GetInstance();
    }
    
    private ConnectionController controller;
    private final ActivityView activityView;
    private final ConfigFile config;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ChatBox = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        InputBox = new javax.swing.JTextArea();
        SendButton = new javax.swing.JButton();
        OtherUserLabel = new javax.swing.JLabel();
        OtherUserActivityLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        ExitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ChatBox.setEditable(false);
        ChatBox.setColumns(20);
        ChatBox.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        ChatBox.setRows(5);
        jScrollPane1.setViewportView(ChatBox);

        InputBox.setColumns(20);
        InputBox.setRows(5);
        InputBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                InputBoxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                InputBoxKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(InputBox);

        SendButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        SendButton.setText("Wyślij");
        SendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendButtonActionPerformed(evt);
            }
        });

        OtherUserLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        OtherUserLabel.setText("Rozmówca");

        jMenu1.setText("File");

        ExitMenuItem.setText("Zakończ");
        ExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(ExitMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 864, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(OtherUserActivityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OtherUserLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OtherUserLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OtherUserActivityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendButtonActionPerformed
        String message = InputBox.getText();
        if ("".equals(message) == false)
        {
            controller.SendTextMessage(message, config.getProperties().getProperty("userName"));
            ShowMessage(config.getProperties().getProperty("userName") + ": " + message);
        }
        InputBox.setText("");
    }//GEN-LAST:event_SendButtonActionPerformed

    private void ExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuItemActionPerformed
        CloseApplication();
    }//GEN-LAST:event_ExitMenuItemActionPerformed

    private void InputBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputBoxKeyPressed
        if (evt.getKeyCode() == VK_ENTER) 
        {
            String message = InputBox.getText();
            InputBox.setEditable(false);
            if ("".equals(message) == false)
            {
                controller.SendTextMessage(message, config.getProperties().getProperty("userName"));
                ShowMessage(config.getProperties().getProperty("userName") + ": " + message);
            }
            InputBox.setText("");
        }
    }//GEN-LAST:event_InputBoxKeyPressed

    private void InputBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputBoxKeyReleased
        if (evt.getKeyCode() == VK_ENTER)
        {
            InputBox.setEditable(true);
        }
    }//GEN-LAST:event_InputBoxKeyReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        CloseApplication();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserGUI().setVisible(true);
            }
        });
    }
    
    @Override
    public void update(Observable observable, Object object)
    {
        Message message = (Message) object;
        if (Message.MESSAGE_TYPE_TEXT.equals(message.getMessageType())) ShowMessage(((TextMessage)message).getSender() + ": " + message.getMessage());
        if (Message.MESSAGE_TYPE_SYSTEM.equals(message.getMessageType()))
        {
            switch(message.getMessage())
            {
                case Message.MESSAGE_CLOSE_SOCKET:
                    activityView.setActive(false);
                    controller.CheckSocketType();
                    break;
                case Message.MESSAGE_OPEN_SOCKET:
                    activityView.setActive(true);
                    break;
                default:
                    break;
            }
            //TODO zachowanie przy wiadomosciach systemowych np. klient sie rozlaczyl, serwer sie wylaczyl
        }
    }
    
    public void ShowMessage(String message)
    {
        ChatBox.append(message + "\n");
    }
    
    public void setConnectionController(ConnectionController controller)
    {
        this.controller = controller;
    }
    
    private void CloseApplication()
    {
        if (activityView.isActive()) controller.SendSystemMessage(Message.MESSAGE_CLOSE_SOCKET);
        System.exit(0);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea ChatBox;
    private javax.swing.JMenuItem ExitMenuItem;
    private javax.swing.JTextArea InputBox;
    private javax.swing.JLabel OtherUserActivityLabel;
    private javax.swing.JLabel OtherUserLabel;
    private javax.swing.JButton SendButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
